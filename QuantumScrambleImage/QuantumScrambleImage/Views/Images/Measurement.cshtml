@model QuantumScrambleImage.Models.ImageViewModel
@{
    ViewData["Title"] = "Measurement";
}

<h1>Measurement</h1>

<!-- Carousel wrapper -->
<div id="carouselMultiItemExample"
     class="carousel slide carousel-dark text-center"
     data-mdb-ride="carousel">
    <a asp-action="Index" class="btn btn-success">Return</a>
    </div>
    <!-- Inner -->
    <div class="carousel-inner py-4">
        <!-- Single item -->
        <div class="carousel-item active">
            <div class="container">
                <div class="row">
                    <div class="col-lg-4">
                        <div class="card">
                            <img src="@Model.ImageFullPath"
                                 class="card-img-top"
                                 alt="Waterfall" />
                            <div class="card-body">
                                <h5 class="card-title">Original Image</h5>
                                <p class="card-text">
                                Entropy: @Model.OriginalEntropy
                                </p>
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target=".originalhistgrame">Histgrame</button>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-4 d-none d-lg-block">
                        <div class="card">
                            <img src="@Model.ScrambleFullPath"
                                 class="card-img-top"
                                 alt="Sunset Over the Sea" />
                            <div class="card-body">
                                <h5 class="card-title">Scramble Image</h5>
                                <p class="card-text">
                                  Entropy: @Model.ScrambleEntropy
                                </p>
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">Histgrame</button>
                            </div>
                        </div>
                    </div>

                   
                </div>
            </div>
        </div>
      
    </div>
    <!-- Inner -->
</div>
<!-- Carousel wrapper -->
<!-- Large modal -->


<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div style="width: 80%;">
                <canvas id="histogramChart"></canvas>
            </div>

        </div>
    </div>
</div>
<div class="modal fade originalhistgrame" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div style="width: 80%;">
                <canvas id="histogramChart1"></canvas>
            </div>

        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var histogramData = @Html.Raw(Json.Serialize(Model.Scramblehistogram));

        var ctx = document.getElementById('histogramChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Array.from({ length: histogramData.length }, (_, i) => i.toString()),
                datasets: [{
                    label: 'Intensity Level',
                    data: histogramData,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom'
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
    <script>
        var histogramData = @Html.Raw(Json.Serialize(Model.originalhistogram));

        var ctx = document.getElementById('histogramChart1').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Array.from({ length: histogramData.length }, (_, i) => i.toString()),
                datasets: [{
                    label: 'Intensity Level',
                    data: histogramData,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom'
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
}